{"version":3,"sources":["hooks/TShareSwapper/useSwapTBondToTShare.ts","hooks/TShareSwapper/useTShareSwapperStats.ts","views/Sbs/Sbs.tsx","hooks/useRefresh.ts","state/transactions/hooks.tsx","hooks/useHandleTransactionReceipt.ts","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useAllowance.ts","hooks/useApprove.ts","components/UnlockWallet/UnlockWallet.tsx","components/Spacer/Spacer.tsx","components/PageHeader/PageHeader.tsx","assets/img/pit.png"],"names":["useSwapTBondToTShare","tombFinance","useTombFinance","handleTransactionReceipt","useHandleTransactionReceipt","onSwapTShare","useCallback","tbondAmount","tbondAmountBn","parseUnits","swapTBondToTShare","useTShareSwapperStats","account","useState","stat","setStat","fastRefresh","useRefresh","useEffect","a","myAccount","getTShareSwapperStat","console","error","fetchTShareSwapperStat","BackgroundImage","createGlobalStyle","PitImage","isNumeric","n","isNaN","parseFloat","isFinite","StyledBoardroom","styled","div","StyledCardsWrapper","StyledCardWrapper","StyledApproveWrapper","StyledCardTitle","props","theme","spacing","StyledCardIcon","color","grey","StyledExchanger","StyledToken","StyledCardContentInner","StyledDesc","span","Sbs","path","useRouteMatch","useWallet","setTbondAmount","tshareAmount","setTshareAmount","useApprove","TBOND","contracts","TShareSwapper","address","approveStatus","approve","tshareSwapperStat","tshareBalance","useMemo","Number","bondBalance","tbondBalance","handleTBondChange","e","currentTarget","value","estimateAmountOfTShare","updateTShareAmount","handleTBondSelectMax","String","handleTShareSelectMax","rateTSharePerTomb","updateTBondAmount","BigNumber","from","pow","mul","getDisplayBalance","handleTShareChange","inputData","Page","exact","PageHeader","icon","title","subtitle","Box","mt","Grid","container","justify","Card","CardContent","TokenSymbol","symbol","size","item","xs","TokenInput","onSelectMax","onChange","max","Spacer","TSHARE","ApprovalState","APPROVED","Button","disabled","NOT_APPROVED","variant","onClick","toString","UnlockWallet","useContext","RefreshContext","fast","slowRefresh","slow","useTransactionAdder","chainId","dispatch","useDispatch","response","summary","approval","hash","Error","addTransaction","useAllTransactions","state","useSelector","transactions","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","tx","receipt","Date","getTime","addedTime","isTransactionRecent","addPopup","useAddPopup","promise","then","catch","err","message","includes","toLowerCase","slice","stack","StyledInputWrapper","borderRadius","StyledInput","input","Input","endAdornment","placeholder","startAdornment","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","toLocaleString","useAllowance","token","pendingApproval","allowance","setAllowance","fetchAllowance","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","currentAllowance","approvalState","lt","PENDING","UNKNOWN","style","position","top","left","transform","AccountButton","s","ThemeContext","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","module","exports"],"mappings":"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","file":"static/js/16.4534f9a4.chunk.js","sourcesContent":["import { useCallback } from 'react';\nimport useTombFinance from '../useTombFinance';\nimport useHandleTransactionReceipt from '../useHandleTransactionReceipt';\n// import { BigNumber } from \"ethers\";\nimport { parseUnits } from 'ethers/lib/utils';\n\n\nconst useSwapTBondToTShare = () => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleSwapTShare = useCallback(\n  \t(tbondAmount: string) => {\n\t  \tconst tbondAmountBn = parseUnits(tbondAmount, 18);\n\t  \thandleTransactionReceipt(\n\t  \t\ttombFinance.swapTBondToTShare(tbondAmountBn),\n\t  \t\t`Swap ${tbondAmount} TBond to TShare`\n\t  \t);\n  \t},\n  \t[tombFinance, handleTransactionReceipt]\n  );\n  return { onSwapTShare: handleSwapTShare };\n};\n\nexport default useSwapTBondToTShare;","import { useEffect, useState } from 'react';\nimport useTombFinance from '../useTombFinance';\nimport { TShareSwapperStat } from '../../tomb-finance/types';\nimport useRefresh from '../useRefresh';\n\nconst useTShareSwapperStats = (account: string) => {\n  const [stat, setStat] = useState<TShareSwapperStat>();\n  const { fastRefresh/*, slowRefresh*/ } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTShareSwapperStat() {\n      try{\n        if(tombFinance.myAccount) {\n          setStat(await tombFinance.getTShareSwapperStat(account));\n        }\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchTShareSwapperStat();\n  }, [setStat, tombFinance, fastRefresh, account]);\n\n  return stat;\n};\n\nexport default useTShareSwapperStats;","import React, { /*useCallback, useEffect, */useMemo, useState } from 'react';\nimport Page from '../../components/Page';\nimport PitImage from '../../assets/img/pit.png';\nimport { createGlobalStyle } from 'styled-components';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport PageHeader from '../../components/PageHeader';\nimport { Box,/* Paper, Typography,*/ Button, Grid } from '@material-ui/core';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport useTombFinance from '../../hooks/useTombFinance';\nimport { getDisplayBalance/*, getBalance*/ } from '../../utils/formatBalance';\nimport { BigNumber/*, ethers*/ } from 'ethers';\nimport useSwapTBondToTShare from '../../hooks/TShareSwapper/useSwapTBondToTShare';\nimport useApprove, { ApprovalState } from '../../hooks/useApprove';\nimport useTShareSwapperStats from '../../hooks/TShareSwapper/useTShareSwapperStats';\nimport TokenInput from '../../components/TokenInput';\nimport Card from '../../components/Card';\nimport CardContent from '../../components/CardContent';\nimport TokenSymbol from '../../components/TokenSymbol';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    background: url(${PitImage}) no-repeat !important;\n    background-size: cover !important;\n  }\n`;\n\nfunction isNumeric(n: any) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nconst Sbs: React.FC = () => {\n  const { path } = useRouteMatch();\n  const { account } = useWallet();\n  const tombFinance = useTombFinance();\n  const [tbondAmount, setTbondAmount] = useState('');\n  const [tshareAmount, setTshareAmount] = useState('');\n\n  const [approveStatus, approve] = useApprove(tombFinance.TBOND, tombFinance.contracts.TShareSwapper.address);\n  const { onSwapTShare } = useSwapTBondToTShare();\n  const tshareSwapperStat = useTShareSwapperStats(account);\n\n  const tshareBalance = useMemo(() => (tshareSwapperStat ? Number(tshareSwapperStat.tshareBalance) : 0), [tshareSwapperStat]);\n  const bondBalance = useMemo(() => (tshareSwapperStat ? Number(tshareSwapperStat.tbondBalance) : 0), [tshareSwapperStat]);\n\n  const handleTBondChange = async (e: any) => {\n    if (e.currentTarget.value === '') {\n      setTbondAmount('');\n      setTshareAmount('');\n      return\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setTbondAmount(e.currentTarget.value);\n    const updateTShareAmount = await tombFinance.estimateAmountOfTShare(e.currentTarget.value);\n    setTshareAmount(updateTShareAmount);  \n  };\n\n  const handleTBondSelectMax = async () => {\n    setTbondAmount(String(bondBalance));\n    const updateTShareAmount = await tombFinance.estimateAmountOfTShare(String(bondBalance));\n    setTshareAmount(updateTShareAmount); \n  };\n\n  const handleTShareSelectMax = async () => {\n    setTshareAmount(String(tshareBalance));\n    const rateTSharePerTomb = (await tombFinance.getTShareSwapperStat(account)).rateTSharePerTomb;\n    const updateTBondAmount = ((BigNumber.from(10).pow(30)).div(BigNumber.from(rateTSharePerTomb))).mul(Number(tshareBalance) * 1e6);\n    setTbondAmount(getDisplayBalance(updateTBondAmount, 18, 6));\n  };\n\n  const handleTShareChange = async (e: any) => {\n    const inputData = e.currentTarget.value;\n    if (inputData === '') {\n      setTshareAmount('');\n      setTbondAmount('');\n      return\n    }\n    if (!isNumeric(inputData)) return;\n    setTshareAmount(inputData);\n    const rateTSharePerTomb = (await tombFinance.getTShareSwapperStat(account)).rateTSharePerTomb;\n    const updateTBondAmount = ((BigNumber.from(10).pow(30)).div(BigNumber.from(rateTSharePerTomb))).mul(Number(inputData) * 1e6);\n    setTbondAmount(getDisplayBalance(updateTBondAmount, 18, 6));\n  }\n\n  return (\n    <Switch>\n      <Page>\n        <BackgroundImage />\n        {!!account ? (\n          <>\n            <Route exact path={path}>\n              <PageHeader icon={'🏦'} title=\"TBond -> TShare Swap\" subtitle=\"Swap TBond to TShare\" />\n            </Route>\n            <Box mt={5}>\n              <Grid container justify=\"center\" spacing={6}>\n                <StyledBoardroom>\n                  <StyledCardsWrapper>\n                    <StyledCardWrapper>\n                      <Card>\n                        <CardContent>\n                          <StyledCardContentInner>\n                            <StyledCardTitle>TBonds</StyledCardTitle>\n                            <StyledExchanger>\n                              <StyledToken>\n                                <StyledCardIcon>\n                                  <TokenSymbol symbol={tombFinance.TBOND.symbol} size={54} />\n                                </StyledCardIcon>\n                              </StyledToken>\n                            </StyledExchanger>\n                            <Grid item xs={12}>\n                              <TokenInput\n                                onSelectMax={handleTBondSelectMax}\n                                onChange={handleTBondChange}\n                                value={tbondAmount}\n                                max={bondBalance}\n                                symbol=\"TBond\"\n                              ></TokenInput>\n                            </Grid>\n                            <StyledDesc>{`${bondBalance} TBOND Available in Wallet`}</StyledDesc>\n                          </StyledCardContentInner>\n                        </CardContent>\n                      </Card>\n                    </StyledCardWrapper>\n                    <Spacer size=\"lg\"/>\n                    <StyledCardWrapper>\n                      <Card>\n                        <CardContent>\n                          <StyledCardContentInner>\n                            <StyledCardTitle>TShare</StyledCardTitle>\n                            <StyledExchanger>\n                              <StyledToken>\n                                <StyledCardIcon>\n                                  <TokenSymbol symbol={tombFinance.TSHARE.symbol} size={54} />\n                                </StyledCardIcon>\n                              </StyledToken>\n                            </StyledExchanger>\n                            <Grid item xs={12}>\n                              <TokenInput\n                                onSelectMax={handleTShareSelectMax}\n                                onChange={handleTShareChange}\n                                value={tshareAmount}\n                                max={tshareBalance}\n                                symbol=\"TShare\"\n                              ></TokenInput>\n                            </Grid>\n                            <StyledDesc>{`${tshareBalance} TSHARE Available in Swapper`}</StyledDesc>\n                          </StyledCardContentInner>\n                        </CardContent>\n                      </Card>\n              \n                    </StyledCardWrapper>\n                  </StyledCardsWrapper>\n                </StyledBoardroom>\n              </Grid>\n            </Box>\n\n            <Box mt={5}>\n              <Grid container justify=\"center\">\n                <Grid item xs={8}>\n                  <Card>\n                    <CardContent>\n                      <StyledApproveWrapper>\n                      {approveStatus !== ApprovalState.APPROVED ? (\n                        <Button\n                          disabled={approveStatus !== ApprovalState.NOT_APPROVED}\n                          color=\"primary\"\n                          variant=\"contained\"\n                          onClick={approve}\n                          size=\"medium\"\n                        >\n                          Approve TBOND\n                        </Button>\n                      ) : (\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          onClick={() => onSwapTShare(tbondAmount.toString())}\n                          size=\"medium\"\n                        >\n                          Swap\n                        </Button>\n                      )}\n                      </StyledApproveWrapper>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n          </>\n        ) : (\n          <UnlockWallet />\n        )}\n      </Page>\n    </Switch>\n  );\n};\n\nconst StyledBoardroom = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledApproveWrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n`;\nconst StyledCardTitle = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 20px;\n  font-weight: 700;\n  height: 64px;\n  justify-content: center;\n  margin-top: ${(props) => -props.theme.spacing[3]}px;\n`;\n\nconst StyledCardIcon = styled.div`\n  background-color: ${(props) => props.theme.color.grey[900]};\n  width: 72px;\n  height: 72px;\n  border-radius: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: ${(props) => props.theme.spacing[2]}px;\n`;\n\nconst StyledExchanger = styled.div`\n  align-items: center;\n  display: flex;\n  margin-bottom: ${(props) => props.theme.spacing[5]}px;\n`;\n\nconst StyledToken = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  font-weight: 600;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst StyledDesc = styled.span``;\n\nexport default Sbs;\n","import { useContext } from 'react'\nimport { RefreshContext } from './../contexts/RefreshContext'\n\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh","import { TransactionResponse } from '@ethersproject/providers';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\n\nimport { AppDispatch, AppState } from '../index';\nimport { addTransaction, clearAllTransactions } from './actions';\nimport { TransactionDetails } from './reducer';\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n  const { chainId, account } = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chainId) return;\n\n      const { hash } = response;\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }));\n    },\n    [dispatch, chainId, account],\n  );\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useWallet();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000;\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  );\n}\n\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\n  const { chainId } = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({ chainId })), [dispatch, chainId]),\n  };\n}\n","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode;\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  startAdornment?: React.ReactNode;\n  value: string;\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  );\n};\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.color.grey[200]};\n  border-radius: ${(props) => props.theme.borderRadius}px;\n  display: flex;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`;\n\nconst StyledInput = styled.input`\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.color.grey[600]};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`;\n\nexport default Input;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Button } from '@material-ui/core';\nimport Input, { InputProps } from '../Input';\n\ninterface TokenInputProps extends InputProps {\n  max: number | string;\n  symbol: string;\n  onSelectMax?: () => void;\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} Available\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\n            <StyledSpacer />\n            <div>\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\n                Max\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n    </StyledTokenInput>\n  );\n};\n\n/*\n            <div>\n              <Button size=\"sm\" text=\"Max\" />\n            </div>\n*/\n\nconst StyledTokenInput = styled.div``;\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`;\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`;\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`;\n\nexport default TokenInput;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { BigNumber } from 'ethers';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\n  const [allowance, setAllowance] = useState<BigNumber>(null);\n  const { account } = useWallet();\n\n  const fetchAllowance = useCallback(async () => {\n    const allowance = await token.allowance(account, spender);\n    setAllowance(allowance);\n  }, [account, spender, token]);\n\n  useEffect(() => {\n    if (account && spender && token) {\n      fetchAllowance().catch((err) => console.error(`Failed to fetch allowance: ${err.stack}`));\n    }\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\n\n  return allowance;\n};\n\nexport default useAllowance;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender,\n      },\n    });\n  }, [approvalState, token, spender, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport AccountButton from '../Nav/AccountButton';\n\nconst UnlockWallet = () => {\n  return (\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n      <AccountButton />\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\n    </Box>\n  );\n};\n\nexport default UnlockWallet;\n","import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext);\n\n  let s: number;\n  switch (size) {\n    case 'lg':\n      s = spacing[6];\n      break;\n    case 'sm':\n      s = spacing[2];\n      break;\n    case 'md':\n    default:\n      s = spacing[4];\n  }\n\n  return <StyledSpacer size={s} />;\n};\n\ninterface StyledSpacerProps {\n  size: number;\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`;\n\nexport default Spacer;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface PageHeaderProps {\n  icon: React.ReactNode;\n  subtitle?: string;\n  title?: string;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\n  return (\n    <StyledPageHeader>\n      {/* <StyledIcon>{icon}</StyledIcon> */}\n      <StyledTitle>{title}</StyledTitle>\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\n    </StyledPageHeader>\n  );\n};\n\nconst StyledPageHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\n  padding-top: ${(props) => props.theme.spacing[6]}px;\n  max-width: 512px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst StyledTitle = styled.h1`\n  color: ${(props) => props.theme.color.grey[100]};\n  font-size: 36px;\n  font-weight: 700;\n  margin: 0;\n  padding: 0;\n`;\n\nconst StyledSubtitle = styled.h3`\n  color: ${(props) => props.theme.color.grey[400]};\n  font-size: 18px;\n  font-weight: 400;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n`;\n\nexport default PageHeader;\n","module.exports = __webpack_public_path__ + \"static/media/pit.268bf984.png\";"],"sourceRoot":""}