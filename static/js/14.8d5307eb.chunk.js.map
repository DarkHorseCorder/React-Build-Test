{"version":3,"sources":["hooks/useApproveZapper.ts","views/Bank/components/ZapModal.tsx","hooks/useTotalValueLocked.ts","views/Home/Home.js","hooks/useRefresh.ts","state/transactions/hooks.tsx","hooks/useHandleTransactionReceipt.ts","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useAllowance.ts","components/ModalActions/ModalActions.tsx","hooks/useTombStats.ts","components/CardIcon/CardIcon.tsx","hooks/useLpStats.ts","assets/img/home.png","hooks/useZap.ts","hooks/useBondStats.ts","hooks/usetShareStats.ts"],"names":["ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","from","useApproveZapper","zappingToken","token","tombFinance","useTombFinance","FTM_TICKER","FTM","TOMB_TICKER","TOMB","TSHARE_TICKER","TSHARE","pendingApproval","useHasPendingApproval","address","ZAPPER_ROUTER_ADDR","currentAllowance","useAllowance","approvalState","useMemo","APPROVED","lt","PENDING","NOT_APPROVED","UNKNOWN","addTransaction","useTransactionAdder","approve","useCallback","a","console","error","response","summary","symbol","approval","tokenAddress","spender","StyledActionSpacer","styled","div","props","theme","spacing","StyledDescriptionText","color","grey","StyledMenuItem","withStyles","root","backgroundColor","selected","MenuItem","ZapModal","onConfirm","onDismiss","tokenName","decimals","balance","useWallet","ftmBalance","Number","toFixed","toString","tombBalance","useTokenBalance","tshareBalance","useState","val","setVal","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","tombFtmLpStats","useLpStats","tShareFtmLpStats","tombLPStats","tshareLPStats","ftmAmountPerLP","startsWith","ftmAmount","handleChange","e","currentTarget","value","n","isNaN","parseFloat","isFinite","estimateZapIn","String","estimateZap","handleSelectMax","Modal","ModalTitle","text","Typography","variant","align","target","rel","href","InputLabel","style","id","Select","onChange","event","getDisplayBalance","labelId","TokenInput","onSelectMax","max","Label","ModalActions","Button","onClick","Alert","severity","useTotalValueLocked","totalValueLocked","setTotalValueLocked","slowRefresh","useRefresh","useEffect","getTotalValueLocked","fetchTVL","BackgroundImage","createGlobalStyle","HomeImage","useStyles","makeStyles","button","breakpoints","down","marginTop","Home","tomb","tShare","classes","TVL","tombStats","useTombStats","tShareStats","usetShareStats","tBondStats","useBondStats","tombProd","tShareProd","buyTombAddress","buyTShareAddress","tombPriceInDollars","priceInDollars","tombPriceInFTM","tokenInFtm","tombCirculatingSupply","circulatingSupply","tombTotalSupply","totalSupply","tSharePriceInDollars","tSharePriceInFTM","tShareCirculatingSupply","tShareTotalSupply","tBondPriceInDollars","tBondPriceInFTM","tBondCirculatingSupply","tBondTotalSupply","tombLpZap","useZap","depositTokenName","tshareLpZap","StyledLink","useModal","amount","onZap","onDissmissTombZap","onPresentTombZap","onDissmissTshareZap","onPresentTshareZap","Page","Grid","container","item","xs","sm","justify","width","paddingTop","src","CashImage","Paper","Box","p","margin","display","Card","CardContent","fontSize","end","separator","prefix","height","marginRight","className","position","watchAssetInMetamask","top","right","alt","MetamaskFox","mt","CardIcon","TokenSymbol","alignContent","disabled","tokenAmount","priceOfOne","totalLiquidity","useContext","RefreshContext","fastRefresh","fast","slow","chainId","account","dispatch","useDispatch","hash","Error","useAllTransactions","state","useSelector","transactions","allTransactions","Object","keys","some","tx","receipt","Date","getTime","addedTime","isTransactionRecent","useHandleTransactionReceipt","addPopup","useAddPopup","promise","then","catch","err","message","includes","toLowerCase","slice","stack","StyledInputWrapper","borderRadius","StyledInput","input","Input","endAdornment","placeholder","startAdornment","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","toLocaleString","size","allowance","setAllowance","fetchAllowance","StyledModalActions","StyledModalAction","children","l","React","Children","toArray","length","map","child","i","stat","setStat","getTombStat","fetchTombPrice","StyledCardIcon","white","lpTicker","getLPStat","fetchLpPrice","module","exports","bank","handleTransactionReceipt","zapIn","getBondStat","fetchBondPrice","useShareStats","getShareStat","fetchSharePrice"],"mappings":"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","file":"static/js/14.8d5307eb.chunk.js","sourcesContent":["import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\nimport { FTM_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\nimport useTombFinance from './useTombFinance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\n  const tombFinance = useTombFinance();\n  let token: ERC20;\n  if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.TOMB;\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: ZAPPER_ROUTER_ADDR,\n      },\n    });\n  }, [approvalState, token, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApproveZapper;\n","import React, { useState, useMemo } from 'react';\n\nimport { Button, Select, MenuItem, InputLabel, Typography, withStyles } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTombFinance from '../../../hooks/useTombFinance';\nimport { useWallet } from 'use-wallet';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { TOMB_TICKER, TSHARE_TICKER, FTM_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\n  const tombFinance = useTombFinance();\n  const { balance } = useWallet();\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const tombBalance = useTokenBalance(tombFinance.TOMB);\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(FTM_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const tombFtmLpStats = useLpStats('TOMB-FTM-LP');\n  const tShareFtmLpStats = useLpStats('TSHARE-FTM-LP');\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(ftmBalance);\n    if (event.target.value === TSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\n    }\n    if (event.target.value === TOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({ token0: '0', token1: '0' });\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  return (\n    <Modal>\n      <ModalTitle text={`Zap in ${tokenName}`} />\n      <Typography variant=\"h6\" align=\"center\">\n        Powered by{' '}\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlnl.finance\">\n          mlnl.finance\n        </a>\n      </Typography>\n\n      <StyledActionSpacer />\n      <InputLabel style={{ color: '#2c2560' }} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{ color: '#2c2560' }}\n        labelId=\"label\"\n        id=\"select\"\n        value={zappingToken}\n      >\n        <StyledMenuItem value={FTM_TICKER}>FTM</StyledMenuItem>\n        <StyledMenuItem value={TSHARE_TICKER}>TSHARE</StyledMenuItem>\n        {/* Tomb as an input for zapping will be disabled due to issues occuring with the Gatekeeper system */}\n        {/* <StyledMenuItem value={TOMB_TICKER}>TOMB</StyledMenuItem> */}\n      </Select>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={zappingTokenBalance}\n        symbol={zappingToken}\n      />\n      <Label text=\"Zap Estimations\" />\n      <StyledDescriptionText>\n        {' '}\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\n      </StyledDescriptionText>\n      <StyledDescriptionText>\n        {' '}\n        ({Number(estimate.token0)} {FTM_TICKER} / {Number(estimate.token1)}{' '}\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\n      </StyledDescriptionText>\n      <ModalActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() =>\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\n          }\n        >\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\n        </Button>\n      </ModalActions>\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"warning\">\n        Beta feature. Use at your own risk!\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useRefresh from './useRefresh';\n\nconst useTotalValueLocked = () => {\n  const [totalValueLocked, setTotalValueLocked] = useState<Number>(0);\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTVL() {\n      try {\n        setTotalValueLocked(await tombFinance.getTotalValueLocked());\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchTVL();\n  }, [setTotalValueLocked, tombFinance, slowRefresh]);\n\n  return totalValueLocked;\n};\n\nexport default useTotalValueLocked;\n","import React, { useMemo } from 'react';\nimport Page from '../../components/Page';\nimport HomeImage from '../../assets/img/home.png';\nimport CashImage from '../../assets/img/crypto_tomb_cash.svg';\nimport Image from 'material-ui-image';\nimport styled from 'styled-components';\nimport { Alert } from '@material-ui/lab';\nimport { createGlobalStyle } from 'styled-components';\nimport CountUp from 'react-countup';\nimport CardIcon from '../../components/CardIcon';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport useTombStats from '../../hooks/useTombStats';\nimport useLpStats from '../../hooks/useLpStats';\nimport useModal from '../../hooks/useModal';\nimport useZap from '../../hooks/useZap';\nimport useBondStats from '../../hooks/useBondStats';\nimport usetShareStats from '../../hooks/usetShareStats';\nimport useTotalValueLocked from '../../hooks/useTotalValueLocked';\nimport { tomb as tombTesting, tShare as tShareTesting } from '../../tomb-finance/deployments/deployments.testing.json';\nimport { tomb as tombProd, tShare as tShareProd } from '../../tomb-finance/deployments/deployments.mainnet.json';\n\nimport MetamaskFox from '../../assets/img/metamask-fox.svg';\n\nimport { Box, Button, Card, CardContent, Grid, Paper } from '@material-ui/core';\nimport ZapModal from '../Bank/components/ZapModal';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport useTombFinance from '../../hooks/useTombFinance';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    background: url(${HomeImage}) no-repeat !important;\n    background-size: cover !important;\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    [theme.breakpoints.down('415')]: {\n      marginTop: '10px',\n    },\n  },\n}));\n\nconst Home = () => {\n  const classes = useStyles();\n  const TVL = useTotalValueLocked();\n  const tombFtmLpStats = useLpStats('TOMB-FTM-LP');\n  const tShareFtmLpStats = useLpStats('TSHARE-FTM-LP');\n  const tombStats = useTombStats();\n  const tShareStats = usetShareStats();\n  const tBondStats = useBondStats();\n  const tombFinance = useTombFinance();\n\n  let tomb;\n  let tShare;\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    tomb = tombTesting;\n    tShare = tShareTesting;\n  } else {\n    tomb = tombProd;\n    tShare = tShareProd;\n  }\n\n  const buyTombAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tomb.address;\n  const buyTShareAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tShare.address;\n\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const tombPriceInDollars = useMemo(\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\n    [tombStats],\n  );\n  const tombPriceInFTM = useMemo(() => (tombStats ? Number(tombStats.tokenInFtm).toFixed(4) : null), [tombStats]);\n  const tombCirculatingSupply = useMemo(() => (tombStats ? String(tombStats.circulatingSupply) : null), [tombStats]);\n  const tombTotalSupply = useMemo(() => (tombStats ? String(tombStats.totalSupply) : null), [tombStats]);\n\n  const tSharePriceInDollars = useMemo(\n    () => (tShareStats ? Number(tShareStats.priceInDollars).toFixed(2) : null),\n    [tShareStats],\n  );\n  const tSharePriceInFTM = useMemo(\n    () => (tShareStats ? Number(tShareStats.tokenInFtm).toFixed(4) : null),\n    [tShareStats],\n  );\n  const tShareCirculatingSupply = useMemo(\n    () => (tShareStats ? String(tShareStats.circulatingSupply) : null),\n    [tShareStats],\n  );\n  const tShareTotalSupply = useMemo(() => (tShareStats ? String(tShareStats.totalSupply) : null), [tShareStats]);\n\n  const tBondPriceInDollars = useMemo(\n    () => (tBondStats ? Number(tBondStats.priceInDollars).toFixed(2) : null),\n    [tBondStats],\n  );\n  const tBondPriceInFTM = useMemo(() => (tBondStats ? Number(tBondStats.tokenInFtm).toFixed(4) : null), [tBondStats]);\n  const tBondCirculatingSupply = useMemo(\n    () => (tBondStats ? String(tBondStats.circulatingSupply) : null),\n    [tBondStats],\n  );\n  const tBondTotalSupply = useMemo(() => (tBondStats ? String(tBondStats.totalSupply) : null), [tBondStats]);\n\n  const tombLpZap = useZap({ depositTokenName: 'TOMB-FTM-LP' });\n  const tshareLpZap = useZap({ depositTokenName: 'TSHARE-FTM-LP' });\n\n  const StyledLink = styled.a`\n    font-weight: 700;\n    text-decoration: none;\n  `;\n\n  const [onPresentTombZap, onDissmissTombZap] = useModal(\n    <ZapModal\n      decimals={18}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        tombLpZap.onZap(zappingToken, tokenName, amount);\n        onDissmissTombZap();\n      }}\n      tokenName={'TOMB-FTM-LP'}\n    />,\n  );\n\n  const [onPresentTshareZap, onDissmissTshareZap] = useModal(\n    <ZapModal\n      decimals={18}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        tshareLpZap.onZap(zappingToken, tokenName, amount);\n        onDissmissTshareZap();\n      }}\n      tokenName={'TSHARE-FTM-LP'}\n    />,\n  );\n\n  return (\n    <Page>\n      <BackgroundImage />\n      <Grid container spacing={3}>\n        {/* Logo */}\n        <Grid container item xs={12} sm={4} justify=\"center\">\n          {/* <Paper>xs=6 sm=3</Paper> */}\n          <Image color=\"none\" style={{ width: '300px', paddingTop: '0px' }} src={CashImage} />\n        </Grid>\n        {/* Explanation text */}\n        <Grid item xs={12} sm={8}>\n          <Paper>\n            <Box p={4}>\n              <h2>Welcome to Tomb Finance</h2>\n              <p>The first algorithmic stablecoin on Fantom Opera, pegged to the price of 1 FTM via seigniorage.</p>\n              <p>\n                Stake your TOMB-FTM LP in the Cemetery to earn TSHARE rewards.\n                Then stake your earned TSHARE in the Masonry to earn more TOMB!\n              </p>\n            </Box>\n          </Paper>\n\n\n\n        </Grid>\n\n        <Grid container spacing={3}>\n    <Grid item  xs={12} sm={12} justify=\"center\"  style={{ margin: '12px', display: 'flex' }}>\n            <Alert variant=\"filled\" severity=\"warning\">\n              <b>\n      Please visit our <StyledLink target=\"_blank\" href=\"https://docs.tomb.finance\">documentation</StyledLink> before purchasing TOMB or TSHARE!</b>\n            </Alert>\n        </Grid>\n        </Grid>\n\n        {/* TVL */}\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent align=\"center\">\n              <h2>Total Value Locked</h2>\n              <CountUp style={{ fontSize: '25px' }} end={TVL} separator=\",\" prefix=\"$\" />\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Wallet */}\n        <Grid item xs={12} sm={8}>\n          <Card style={{ height: '100%' }}>\n            <CardContent align=\"center\" style={{ marginTop: '2.5%' }}>\n              {/* <h2 style={{ marginBottom: '20px' }}>Wallet Balance</h2> */}\n              <Button color=\"primary\" href=\"/masonry\" variant=\"contained\" style={{ marginRight: '10px' }}>\n                Stake Now\n              </Button>\n              <Button href=\"/cemetery\" variant=\"contained\" style={{ marginRight: '10px' }}>\n                Farm Now\n              </Button>\n              <Button\n                color=\"primary\"\n                target=\"_blank\"\n                href={buyTombAddress}\n                variant=\"contained\"\n                style={{ marginRight: '10px' }}\n                className={classes.button}\n              >\n                Buy TOMB\n              </Button>\n              <Button variant=\"contained\" target=\"_blank\" href={buyTShareAddress} className={classes.button}>\n                Buy TSHARE\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* TOMB */}\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>TOMB</h2>\n              <Button\n                onClick={() => {\n                  tombFinance.watchAssetInMetamask('TOMB');\n                }}\n                color=\"primary\"\n                variant=\"outlined\"\n                style={{ position: 'absolute', top: '10px', right: '10px' }}\n              >\n                +&nbsp;\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\n              </Button>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TOMB\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tombPriceInFTM ? tombPriceInFTM : '-.----'} FTM</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px', alignContent: 'flex-start' }}>\n                  ${tombPriceInDollars ? tombPriceInDollars : '-.--'}\n                </span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tombCirculatingSupply * tombPriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tombCirculatingSupply} <br />\n                Total Supply: {tombTotalSupply}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* TSHARE */}\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>TSHARE</h2>\n              <Button\n                onClick={() => {\n                  tombFinance.watchAssetInMetamask('TSHARE');\n                }}\n                color=\"primary\"\n                variant=\"outlined\"\n                style={{ position: 'absolute', top: '10px', right: '10px' }}\n              >\n                +&nbsp;\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\n              </Button>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TSHARE\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tSharePriceInFTM ? tSharePriceInFTM : '-.----'} FTM</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px' }}>${tSharePriceInDollars ? tSharePriceInDollars : '-.--'}</span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tShareCirculatingSupply * tSharePriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tShareCirculatingSupply} <br />\n                Total Supply: {tShareTotalSupply}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* TBOND */}\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>TBOND</h2>\n              <Button\n                onClick={() => {\n                  tombFinance.watchAssetInMetamask('TBOND');\n                }}\n                color=\"primary\"\n                variant=\"outlined\"\n                style={{ position: 'absolute', top: '10px', right: '10px' }}\n              >\n                +&nbsp;\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\n              </Button>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TBOND\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tBondPriceInFTM ? tBondPriceInFTM : '-.----'} FTM</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px' }}>${tBondPriceInDollars ? tBondPriceInDollars : '-.--'}</span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tBondCirculatingSupply * tBondPriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tBondCirculatingSupply} <br />\n                Total Supply: {tBondTotalSupply}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Card>\n            <CardContent align=\"center\">\n              <h2>TOMB-FTM Spooky LP</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TOMB-FTM-LP\" />\n                </CardIcon>\n              </Box>\n              <Box mt={2}>\n                <Button color=\"primary\" disabled={true} onClick={onPresentTombZap} variant=\"contained\">\n                  Zap In\n                </Button>\n              </Box>\n              <Box mt={2}>\n                <span style={{ fontSize: '26px' }}>\n                  {tombLPStats?.tokenAmount ? tombLPStats?.tokenAmount : '-.--'} TOMB /{' '}\n                  {tombLPStats?.ftmAmount ? tombLPStats?.ftmAmount : '-.--'} FTM\n                </span>\n              </Box>\n              <Box>${tombLPStats?.priceOfOne ? tombLPStats.priceOfOne : '-.--'}</Box>\n              <span style={{ fontSize: '12px' }}>\n                Liquidity: ${tombLPStats?.totalLiquidity ? tombLPStats.totalLiquidity : '-.--'} <br />\n                Total supply: {tombLPStats?.totalSupply ? tombLPStats.totalSupply : '-.--'}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Card>\n            <CardContent align=\"center\">\n              <h2>TSHARE-FTM Spooky LP</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TSHARE-FTM-LP\" />\n                </CardIcon>\n              </Box>\n              <Box mt={2}>\n                <Button color=\"primary\" onClick={onPresentTshareZap} variant=\"contained\">\n                  Zap In\n                </Button>\n              </Box>\n              <Box mt={2}>\n                <span style={{ fontSize: '26px' }}>\n                  {tshareLPStats?.tokenAmount ? tshareLPStats?.tokenAmount : '-.--'} TSHARE /{' '}\n                  {tshareLPStats?.ftmAmount ? tshareLPStats?.ftmAmount : '-.--'} FTM\n                </span>\n              </Box>\n              <Box>${tshareLPStats?.priceOfOne ? tshareLPStats.priceOfOne : '-.--'}</Box>\n              <span style={{ fontSize: '12px' }}>\n                Liquidity: ${tshareLPStats?.totalLiquidity ? tshareLPStats.totalLiquidity : '-.--'}\n                <br />\n                Total supply: {tshareLPStats?.totalSupply ? tshareLPStats.totalSupply : '-.--'}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Page>\n  );\n};\n\nexport default Home;\n","import { useContext } from 'react'\nimport { RefreshContext } from './../contexts/RefreshContext'\n\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh","import { TransactionResponse } from '@ethersproject/providers';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\n\nimport { AppDispatch, AppState } from '../index';\nimport { addTransaction, clearAllTransactions } from './actions';\nimport { TransactionDetails } from './reducer';\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n  const { chainId, account } = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chainId) return;\n\n      const { hash } = response;\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }));\n    },\n    [dispatch, chainId, account],\n  );\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useWallet();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000;\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  );\n}\n\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\n  const { chainId } = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({ chainId })), [dispatch, chainId]),\n  };\n}\n","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode;\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  startAdornment?: React.ReactNode;\n  value: string;\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  );\n};\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.color.grey[200]};\n  border-radius: ${(props) => props.theme.borderRadius}px;\n  display: flex;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`;\n\nconst StyledInput = styled.input`\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.color.grey[600]};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`;\n\nexport default Input;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Button } from '@material-ui/core';\nimport Input, { InputProps } from '../Input';\n\ninterface TokenInputProps extends InputProps {\n  max: number | string;\n  symbol: string;\n  onSelectMax?: () => void;\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} Available\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\n            <StyledSpacer />\n            <div>\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\n                Max\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n    </StyledTokenInput>\n  );\n};\n\n/*\n            <div>\n              <Button size=\"sm\" text=\"Max\" />\n            </div>\n*/\n\nconst StyledTokenInput = styled.div``;\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`;\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`;\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`;\n\nexport default TokenInput;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { BigNumber } from 'ethers';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\n  const [allowance, setAllowance] = useState<BigNumber>(null);\n  const { account } = useWallet();\n\n  const fetchAllowance = useCallback(async () => {\n    const allowance = await token.allowance(account, spender);\n    setAllowance(allowance);\n  }, [account, spender, token]);\n\n  useEffect(() => {\n    if (account && spender && token) {\n      fetchAllowance().catch((err) => console.error(`Failed to fetch allowance: ${err.stack}`));\n    }\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\n\n  return allowance;\n};\n\nexport default useAllowance;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length;\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <StyledSpacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  );\n};\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.color.grey[100]}00;\n  display: flex;\n  height: 96px;\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\n    ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`;\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nexport default ModalActions;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useTombStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { fastRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTombPrice(){\n      try {\n        setStat(await tombFinance.getTombStat());\n      }\n      catch(err){\n        console.error(err)\n      }\n    }\n    fetchTombPrice();\n  }, [setStat, tombFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useTombStats;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardIconProps {\n  children?: React.ReactNode;\n}\n\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\n\nconst StyledCardIcon = styled.div`\n  background-color: ${(props) => props.theme.color.white};\n  font-size: 36px;\n  height: 95px;\n  width: 95px;\n  border-radius: 40px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  box-shadow: inset 4px 4px 8px ${(props) => props.theme.color.grey[300]},\n    inset -6px -6px 12px ${(props) => props.theme.color.grey[100]};\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default CardIcon;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { LPStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useLpStats = (lpTicker: string) => {\n  const [stat, setStat] = useState<LPStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchLpPrice() {\n      try{\n        setStat(await tombFinance.getLPStat(lpTicker));\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchLpPrice();\n  }, [setStat, tombFinance, slowRefresh, lpTicker]);\n\n  return stat;\n};\n\nexport default useLpStats;\n","module.exports = __webpack_public_path__ + \"static/media/home.87c905bf.png\";","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useZap = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleZap = useCallback(\n    (zappingToken: string, tokenName: string, amount: string) => {\n      handleTransactionReceipt(\n        tombFinance.zapIn(zappingToken, tokenName, amount),\n        `Zap ${amount} in ${bank.depositTokenName}.`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onZap: handleZap };\n};\n\nexport default useZap;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useBondStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchBondPrice() {\n      try {\n        setStat(await tombFinance.getBondStat());\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchBondPrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useBondStats;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useShareStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchSharePrice() {\n      try {\n        setStat(await tombFinance.getShareStat());\n      } catch(err){\n        console.error(err)\n      }\n    }\n    fetchSharePrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useShareStats;\n"],"sourceRoot":""}