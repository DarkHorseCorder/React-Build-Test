{"version":3,"sources":["components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","hooks/useApproveZapper.ts","views/Bank/components/ZapModal.tsx","components/IconButton/IconButton.tsx","../node_modules/@material-ui/icons/FlashOn.js","assets/img/cemetery.png","hooks/useEarnings.ts","hooks/useHarvest.ts","views/Bank/components/Harvest.tsx","hooks/useStake.ts","hooks/useStakedBalance.ts","hooks/useWithdraw.ts","views/Bank/components/DepositModal.tsx","views/Bank/components/WithdrawModal.tsx","views/Bank/components/Stake.tsx","hooks/useBank.ts","hooks/useStatsForPool.ts","hooks/useRedeem.ts","views/Bank/Bank.tsx","../node_modules/@material-ui/core/esm/CardActions/CardActions.js","views/Cemetery/CemeteryCard.js","hooks/useBanks.ts","views/Cemetery/Cemetery.js","hooks/useRefresh.ts","state/transactions/hooks.tsx","hooks/useHandleTransactionReceipt.ts","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useAllowance.ts","components/ModalActions/ModalActions.tsx","hooks/useApprove.ts","components/UnlockWallet/UnlockWallet.tsx","hooks/useTombStats.ts","components/CardIcon/CardIcon.tsx","components/Spacer/Spacer.tsx","hooks/useLpStats.ts","components/PageHeader/PageHeader.tsx","components/Value/Value.tsx","hooks/useZap.ts","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts"],"names":["StyledIcon","styled","div","Icon","children","AddIcon","color","themeColor","useContext","ThemeContext","height","viewBox","width","d","fill","grey","RemoveIcon","ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","from","useApproveZapper","zappingToken","token","tombFinance","useTombFinance","FTM_TICKER","FTM","TOMB_TICKER","TOMB","TSHARE_TICKER","TSHARE","pendingApproval","useHasPendingApproval","address","ZAPPER_ROUTER_ADDR","currentAllowance","useAllowance","approvalState","useMemo","APPROVED","lt","PENDING","NOT_APPROVED","UNKNOWN","addTransaction","useTransactionAdder","approve","useCallback","a","console","error","response","summary","symbol","approval","tokenAddress","spender","StyledActionSpacer","props","theme","spacing","StyledDescriptionText","StyledMenuItem","withStyles","root","backgroundColor","selected","MenuItem","ZapModal","onConfirm","onDismiss","tokenName","decimals","balance","useWallet","ftmBalance","Number","toFixed","toString","tombBalance","useTokenBalance","tshareBalance","useState","val","setVal","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","tombFtmLpStats","useLpStats","tShareFtmLpStats","tombLPStats","tshareLPStats","ftmAmountPerLP","startsWith","ftmAmount","handleChange","e","currentTarget","value","n","isNaN","parseFloat","isFinite","estimateZapIn","String","estimateZap","handleSelectMax","Modal","ModalTitle","text","Typography","variant","align","target","rel","href","InputLabel","style","id","Select","onChange","event","getDisplayBalance","labelId","TokenInput","onSelectMax","max","Label","ModalActions","Button","onClick","Alert","severity","StyledButton","button","disabled","primary","main","undefined","StyledLink","Link","IconButton","to","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","React","_default","createElement","module","useEarnings","poolName","earnTokenName","poolId","setBalance","isUnlocked","fetchBalance","earnedFromBank","myAccount","useEffect","catch","err","stack","refreshBalance","setInterval","config","refreshInterval","clearInterval","useHarvest","bank","handleTransactionReceipt","useHandleTransactionReceipt","onReward","harvest","contract","StyledCardHeader","StyledCardActions","StyledCardContentInner","Harvest","earnings","tombStats","useTombStats","tShareStats","useShareStats","tokenStats","tokenPriceInDollars","priceInDollars","earnedInDollars","Card","CardContent","CardIcon","TokenSymbol","earnToken","Value","eq","useStake","onStake","amount","amountBn","parseUnits","depositToken","decimal","stake","depositTokenName","useStakedBalance","stakedBalanceOnBank","useWithdraw","onWithdraw","unstake","DepositModal","fullBalance","getFullDisplayBalance","WithdrawModal","Stake","useApprove","approveStatus","tokenBalance","stakedBalance","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","onZap","useZap","useModal","onDismissDeposit","onPresentDeposit","onDissmissZap","onPresentZap","onDismissWithdraw","onPresentWithdraw","size","closedForStaking","marginTop","useBank","contractName","BanksContext","banks","find","useStatsForPool","poolAPRs","setPoolAPRs","fetchAPRsForPool","getPoolAPRs","useRedeem","onRedeem","exit","useStyles","makeStyles","gridItem","breakpoints","up","LPTokenHelpText","pairName","uniswapUrl","tombAddr","tshareAddr","includes","BankNotFound","Center","PageHeader","icon","title","subtitle","StyledBank","StyledCardsWrapper","StyledCardWrapper","Bank","window","scrollTo","classes","account","statsOnPool","name","Box","Grid","container","justify","marginBottom","item","xs","md","lg","className","textAlign","yearlyAPR","dailyAPR","TVL","mt","Spacer","UnlockWallet","CardActions","ref","_props$disableSpacing","disableSpacing","other","_objectWithoutProperties","_extends","clsx","display","alignItems","padding","marginLeft","CemeteryCard","position","right","top","borderRadius","justifyContent","component","toUpperCase","useBanks","BackgroundImage","createGlobalStyle","CemeteryImage","Cemetery","path","useRouteMatch","activeBanks","filter","finished","Page","exact","Container","maxWidth","gutterBottom","hidden","sectionInUI","length","map","Fragment","key","useRefresh","RefreshContext","fastRefresh","fast","slowRefresh","slow","chainId","dispatch","useDispatch","hash","Error","useAllTransactions","state","useSelector","transactions","allTransactions","keys","some","tx","receipt","Date","getTime","addedTime","isTransactionRecent","addPopup","useAddPopup","promise","then","message","toLowerCase","slice","StyledInputWrapper","StyledInput","input","Input","endAdornment","placeholder","startAdornment","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","toLocaleString","allowance","setAllowance","fetchAllowance","StyledModalActions","StyledModalAction","l","Children","toArray","child","i","left","transform","AccountButton","stat","setStat","getTombStat","fetchTombPrice","StyledCardIcon","white","s","lpTicker","getLPStat","fetchLpPrice","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","StyledValue","zapIn","getShareStat","fetchSharePrice","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","refreshStakedTokenPriceInDollars"],"mappings":"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","file":"static/js/11.b5224fe3.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport interface IconProps {\n  color?: string;\n  children?: string;\n}\n\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\n\nconst StyledIcon = styled.div``;\n\nexport default Icon;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport Icon, { IconProps } from '../Icon';\n\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\n  const { color: themeColor } = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default AddIcon;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport Icon, { IconProps } from '../Icon';\n\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\n  const { color: themeColor } = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13H5v-2h14v2z\" />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default RemoveIcon;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\nimport { FTM_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\nimport useTombFinance from './useTombFinance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\n  const tombFinance = useTombFinance();\n  let token: ERC20;\n  if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.TOMB;\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: ZAPPER_ROUTER_ADDR,\n      },\n    });\n  }, [approvalState, token, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApproveZapper;\n","import React, { useState, useMemo } from 'react';\n\nimport { Button, Select, MenuItem, InputLabel, Typography, withStyles } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTombFinance from '../../../hooks/useTombFinance';\nimport { useWallet } from 'use-wallet';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { TOMB_TICKER, TSHARE_TICKER, FTM_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\n  const tombFinance = useTombFinance();\n  const { balance } = useWallet();\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const tombBalance = useTokenBalance(tombFinance.TOMB);\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(FTM_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const tombFtmLpStats = useLpStats('TOMB-FTM-LP');\n  const tShareFtmLpStats = useLpStats('TSHARE-FTM-LP');\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(ftmBalance);\n    if (event.target.value === TSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\n    }\n    if (event.target.value === TOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({ token0: '0', token1: '0' });\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  return (\n    <Modal>\n      <ModalTitle text={`Zap in ${tokenName}`} />\n      <Typography variant=\"h6\" align=\"center\">\n        Powered by{' '}\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlnl.finance\">\n          mlnl.finance\n        </a>\n      </Typography>\n\n      <StyledActionSpacer />\n      <InputLabel style={{ color: '#2c2560' }} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{ color: '#2c2560' }}\n        labelId=\"label\"\n        id=\"select\"\n        value={zappingToken}\n      >\n        <StyledMenuItem value={FTM_TICKER}>FTM</StyledMenuItem>\n        <StyledMenuItem value={TSHARE_TICKER}>TSHARE</StyledMenuItem>\n        {/* Tomb as an input for zapping will be disabled due to issues occuring with the Gatekeeper system */}\n        {/* <StyledMenuItem value={TOMB_TICKER}>TOMB</StyledMenuItem> */}\n      </Select>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={zappingTokenBalance}\n        symbol={zappingToken}\n      />\n      <Label text=\"Zap Estimations\" />\n      <StyledDescriptionText>\n        {' '}\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\n      </StyledDescriptionText>\n      <StyledDescriptionText>\n        {' '}\n        ({Number(estimate.token0)} {FTM_TICKER} / {Number(estimate.token1)}{' '}\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\n      </StyledDescriptionText>\n      <ModalActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() =>\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\n          }\n        >\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\n        </Button>\n      </ModalActions>\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"warning\">\n        Beta feature. Use at your own risk!\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\ninterface IconButtonProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  onClick?: () => void;\n  to?: string;\n}\n\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\n  return (\n    <StyledButton disabled={disabled} onClick={onClick}>\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\n    </StyledButton>\n  );\n};\n\ninterface StyledButtonProps {\n  disabled?: boolean;\n}\n/*\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\n */\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  align-items: center;\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\n  background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\n  border: 0;\n  border-radius: 28px;\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\n  cursor: pointer;\n  display: flex;\n  font-weight: 700;\n  height: 56px;\n  justify-content: center;\n  letter-spacing: 1px;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\n  text-transform: uppercase;\n  width: 56px;\n  &:hover {\n    // background-color: ${(props) => props.theme.color.grey[800]};\n    background-color: #2c2560;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex: 1;\n  height: 56px;\n  justify-content: center;\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n  text-decoration: none;\n`;\n\nexport default IconButton;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 2v11h3v9l7-12h-4l4-8z\"\n}), 'FlashOn');\n\nexports.default = _default;","module.exports = __webpack_public_path__ + \"static/media/cemetery.10f2f6b9.png\";","import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport { ContractName } from '../tomb-finance';\nimport config from '../config';\n\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, earnTokenName, poolId, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useEarnings;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { Bank } from '../tomb-finance';\n\nconst useHarvest = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleReward = useCallback(() => {\n    handleTransactionReceipt(\n      tombFinance.harvest(bank.contract, bank.poolId),\n      `Claim ${bank.earnTokenName} from ${bank.contract}`,\n    );\n  }, [bank, tombFinance, handleTransactionReceipt]);\n\n  return { onReward: handleReward };\n};\n\nexport default useHarvest;\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Button, Card, CardContent } from '@material-ui/core';\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\n\nimport useEarnings from '../../../hooks/useEarnings';\nimport useHarvest from '../../../hooks/useHarvest';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport { Bank } from '../../../tomb-finance';\nimport useTombStats from '../../../hooks/useTombStats';\nimport useShareStats from '../../../hooks/usetShareStats';\n\ninterface HarvestProps {\n  bank: Bank;\n}\n\nconst Harvest: React.FC<HarvestProps> = ({ bank }) => {\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\n  const { onReward } = useHarvest(bank);\n  const tombStats = useTombStats();\n  const tShareStats = useShareStats();\n\n  const tokenName = bank.earnTokenName === 'TSHARE' ? 'TSHARE' : 'TOMB';\n  const tokenStats = bank.earnTokenName === 'TSHARE' ? tShareStats : tombStats;\n  const tokenPriceInDollars = useMemo(\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\n    [tokenStats],\n  );\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\n  return (\n    <Card>\n      <CardContent>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <CardIcon>\n              <TokenSymbol symbol={bank.earnToken.symbol} />\n            </CardIcon>\n            <Value value={getDisplayBalance(earnings)} />\n            <Label text={`≈ $${earnedInDollars}`} />\n            <Label text={`${tokenName} Earned`} />\n          </StyledCardHeader>\n          <StyledCardActions>\n            <Button onClick={onReward} disabled={earnings.eq(0)} color=\"primary\" variant=\"contained\">\n              Claim\n            </Button>\n          </StyledCardActions>\n        </StyledCardContentInner>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[6]}px;\n  width: 100%;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Harvest;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { parseUnits } from 'ethers/lib/utils';\n\nconst useStake = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleStake = useCallback(\n    (amount: string) => {\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\n      handleTransactionReceipt(\n        tombFinance.stake(bank.contract, bank.poolId, amountBn),\n        `Stake ${amount} ${bank.depositTokenName} to ${bank.contract}`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onStake: handleStake };\n};\n\nexport default useStake;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport { ContractName } from '../tomb-finance';\nimport config from '../config';\n\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, poolId, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useStakedBalance;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { parseUnits } from 'ethers/lib/utils';\n\nconst useWithdraw = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleWithdraw = useCallback(\n    (amount: string) => {\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\n      handleTransactionReceipt(\n        tombFinance.unstake(bank.contract, bank.poolId, amountBn),\n        `Withdraw ${amount} ${bank.depositTokenName} from ${bank.contract}`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onWithdraw: handleWithdraw };\n};\n\nexport default useWithdraw;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\ninterface DepositModalProps extends ModalProps {\n  max: BigNumber;\n  decimals: number;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, decimals, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, decimals, false);\n  }, [max, decimals]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Deposit ${tokenName}`} />\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        {/* <Button color=\"secondary\" variant=\"outlined\" onClick={onDismiss}>Cancel</Button> */}\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default DepositModal;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\ninterface WithdrawModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimals = 18 }) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, decimals, false);\n  }, [max, decimals]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Withdraw ${tokenName}`} />\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n        {/* <Button color=\"secondary\" onClick={onDismiss}>Cancel</Button> */}\n\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default WithdrawModal;\n","import React, { useMemo, useContext } from 'react';\nimport styled from 'styled-components';\n\n// import Button from '../../../components/Button';\nimport { Button, Card, CardContent } from '@material-ui/core';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport IconButton from '../../../components/IconButton';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport { ThemeContext } from 'styled-components';\n\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useStake from '../../../hooks/useStake';\nimport useZap from '../../../hooks/useZap';\nimport useStakedBalance from '../../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdraw from '../../../hooks/useWithdraw';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport ZapModal from './ZapModal';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport { Bank } from '../../../tomb-finance';\n\ninterface StakeProps {\n  bank: Bank;\n}\n\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\n\n  const { color: themeColor } = useContext(ThemeContext);\n  const tokenBalance = useTokenBalance(bank.depositToken);\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const tokenPriceInDollars = useMemo(\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\n    [stakedTokenPriceInDollars],\n  );\n  const earnedInDollars = (\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\n  ).toFixed(2);\n  const { onStake } = useStake(bank);\n  const { onZap } = useZap(bank);\n  const { onWithdraw } = useWithdraw(bank);\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onStake(amount);\n        onDismissDeposit();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  const [onPresentZap, onDissmissZap] = useModal(\n    <ZapModal\n      decimals={bank.depositToken.decimal}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onZap(zappingToken, tokenName, amount);\n        onDissmissZap();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onWithdraw(amount);\n        onDismissWithdraw();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  return (\n    <Card>\n      <CardContent>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <CardIcon>\n              <TokenSymbol symbol={bank.depositToken.symbol} size={54} />\n            </CardIcon>\n            <Value value={getDisplayBalance(stakedBalance, bank.depositToken.decimal)} />\n            <Label text={`≈ $${earnedInDollars}`} />\n            <Label text={`${bank.depositTokenName} Staked`} />\n          </StyledCardHeader>\n          <StyledCardActions>\n            {approveStatus !== ApprovalState.APPROVED ? (\n              <Button\n                disabled={\n                  bank.closedForStaking ||\n                  approveStatus === ApprovalState.PENDING ||\n                  approveStatus === ApprovalState.UNKNOWN\n                }\n                onClick={approve}\n                color=\"primary\"\n                variant=\"contained\"\n                style={{ marginTop: '20px' }}\n              >\n                {`Approve ${bank.depositTokenName}`}\n              </Button>\n            ) : (\n              <>\n                <IconButton onClick={onPresentWithdraw}>\n                  <RemoveIcon />\n                </IconButton>\n                <StyledActionSpacer />\n                <IconButton\n                  disabled={bank.closedForStaking || bank.depositTokenName === 'TOMB-FTM-LP'}\n                  onClick={() => (bank.closedForStaking ? null : onPresentZap())}\n                >\n                  <FlashOnIcon style={{ color: themeColor.grey[400] }} />\n                </IconButton>\n                <StyledActionSpacer />\n                <IconButton\n                  disabled={bank.closedForStaking}\n                  onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\n                >\n                  <AddIcon />\n                </IconButton>\n              </>\n            )}\n          </StyledCardActions>\n        </StyledCardContentInner>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Stake;\n","import { useContext } from 'react';\nimport { Context as BanksContext } from '../contexts/Banks';\nimport { Bank, ContractName } from '../tomb-finance';\n\nconst useBank = (contractName: ContractName): Bank => {\n  const { banks } = useContext(BanksContext);\n  return banks.find((bank) => bank.contract === contractName);\n};\n\nexport default useBank;\n","import { useCallback, useState, useEffect } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport { PoolStats } from '../tomb-finance/types';\nimport config from '../config';\n\nconst useStatsForPool = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n\n  const [poolAPRs, setPoolAPRs] = useState<PoolStats>();\n\n  const fetchAPRsForPool = useCallback(async () => {\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\n  }, [tombFinance, bank]);\n\n  useEffect(() => {\n    fetchAPRsForPool().catch((err) => console.error(`Failed to fetch TBOND price: ${err.stack}`));\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\n    return () => clearInterval(refreshInterval);\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\n\n  return poolAPRs;\n};\n\nexport default useStatsForPool;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useRedeem = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleRedeem = useCallback(() => {\n    handleTransactionReceipt(tombFinance.exit(bank.contract, bank.poolId), `Redeem ${bank.contract}`);\n  }, [bank, tombFinance, handleTransactionReceipt]);\n\n  return { onRedeem: handleRedeem };\n};\n\nexport default useRedeem;\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { useParams } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Box, Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\n\nimport PageHeader from '../../components/PageHeader';\nimport Spacer from '../../components/Spacer';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Harvest from './components/Harvest';\nimport Stake from './components/Stake';\nimport useBank from '../../hooks/useBank';\nimport useStatsForPool from '../../hooks/useStatsForPool';\nimport useRedeem from '../../hooks/useRedeem';\nimport { Bank as BankEntity } from '../../tomb-finance';\nimport useTombFinance from '../../hooks/useTombFinance';\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90px',\n    },\n  },\n}));\n\nconst Bank: React.FC = () => {\n  useEffect(() => window.scrollTo(0, 0));\n  const classes = useStyles();\n  // const { bankId } = useParams();\n  const bank = useBank(\"1\");\n\n  const { account } = useWallet();\n  const { onRedeem } = useRedeem(bank);\n  const statsOnPool = useStatsForPool(bank);\n  return account && bank ? (\n    <>\n      <PageHeader\n        icon=\"🏦\"\n        subtitle={`Deposit ${bank?.depositTokenName} and earn ${bank?.earnTokenName}`}\n        title={bank?.name}\n      />\n      <Box>\n        <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '50px' }}>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography>APR</Typography>\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}%</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography>Daily APR</Typography>\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.dailyAPR}%</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography>TVL</Typography>\n                <Typography>${statsOnPool?.TVL}</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box mt={5}>\n        <StyledBank>\n          <StyledCardsWrapper>\n            <StyledCardWrapper>\n              <Harvest bank={bank} />\n            </StyledCardWrapper>\n            <Spacer />\n            <StyledCardWrapper>{<Stake bank={bank} />}</StyledCardWrapper>\n          </StyledCardsWrapper>\n          <Spacer size=\"lg\" />\n          {bank.depositTokenName.includes('LP') && <LPTokenHelpText bank={bank} />}\n          <Spacer size=\"lg\" />\n          <div>\n            <Button onClick={onRedeem} color=\"primary\" variant=\"contained\">\n              Claim & Withdraw\n            </Button>\n          </div>\n          <Spacer size=\"lg\" />\n        </StyledBank>\n      </Box>\n    </>\n  ) : !bank ? (\n    <BankNotFound />\n  ) : (\n    <UnlockWallet />\n  );\n};\n\nconst LPTokenHelpText: React.FC<{ bank: BankEntity }> = ({ bank }) => {\n  const tombFinance = useTombFinance();\n  const tombAddr = tombFinance.TOMB.address;\n  const tshareAddr = tombFinance.TSHARE.address;\n\n  let pairName: string;\n  let uniswapUrl: string;\n  if (bank.depositTokenName.includes('TOMB')) {\n    pairName = 'TOMB-FTM pair';\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tombAddr;\n  } else {\n    pairName = 'TSHARE-FTM pair';\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tshareAddr;\n  }\n  return (\n    <Card>\n      <CardContent>\n        <StyledLink href={uniswapUrl} target=\"_blank\">\n          {`👻 Provide liquidity for ${pairName} now on SpookySwap 👻`}\n        </StyledLink>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst BankNotFound = () => {\n  return (\n    <Center>\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"You've hit a bank just robbed by unicorns.\" />\n    </Center>\n  );\n};\n\nconst StyledBank = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledLink = styled.a`\n  font-weight: 700;\n  text-decoration: none;\n  color: ${(props) => props.theme.color.primary.main};\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  width: 600px;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst Center = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default Bank;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, Button, Card, CardActions, CardContent, Typography, Grid } from '@material-ui/core';\n\nimport TokenSymbol from '../../components/TokenSymbol';\n\nconst CemeteryCard = ({ bank }) => {\n  return (\n    <Grid item xs={12} md={4} lg={4}>\n      <Card variant=\"outlined\">\n        <CardContent>\n          <Box style={{ position: 'relative' }}>\n            <Box\n              style={{\n                position: 'absolute',\n                right: '0px',\n                top: '-5px',\n                height: '48px',\n                width: '48px',\n                borderRadius: '40px',\n                backgroundColor: 'white',\n                alignItems: 'center',\n                display: 'flex',\n                justifyContent: 'center',\n              }}\n            >\n              <TokenSymbol size={32} symbol={bank.depositTokenName} />\n            </Box>\n            <Typography variant=\"h5\" component=\"h2\">\n              {bank.depositTokenName}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {/* {bank.name} */}\n              Deposit {bank.depositTokenName.toUpperCase()} Earn {` ${bank.earnTokenName}`}\n            </Typography>\n          </Box>\n        </CardContent>\n        <CardActions style={{ justifyContent: 'flex-end' }}>\n          <Button color=\"primary\" size=\"small\" variant=\"contained\" component={Link} to={`/cemetery/${bank.contract}`}>\n            View\n          </Button>\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default CemeteryCard;\n","import { useContext } from 'react';\nimport { Context as BanksContext } from '../contexts/Banks';\n\nconst useBanks = () => {\n  const { banks } = useContext(BanksContext);\n  return [banks];\n};\n\nexport default useBanks;\n","import React from 'react';\nimport { useWallet } from 'use-wallet';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport Bank from '../Bank';\n\nimport { Box, Container, Typography, Grid } from '@material-ui/core';\n\nimport { Alert } from '@material-ui/lab';\n\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\nimport CemeteryCard from './CemeteryCard';\nimport CemeteryImage from '../../assets/img/cemetery.png';\nimport { createGlobalStyle } from 'styled-components';\n\nimport useBanks from '../../hooks/useBanks';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    background: url(${CemeteryImage}) no-repeat !important;\n    background-size: cover !important;\n  }\n`;\n\nconst Cemetery = () => {\n  const [banks] = useBanks();\n  const { path } = useRouteMatch();\n  const { account } = useWallet();\n  const activeBanks = banks.filter((bank) => !bank.finished);\n  return (\n    <Switch>\n      <Page>\n        <Route exact path={path}>\n          <BackgroundImage />\n          {!!account ? (\n            <Container maxWidth=\"lg\">\n              <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n                Cemetery\n              </Typography>\n\n              <Box mt={5}>\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 2).length === 0}>\n                  <Typography color=\"textPrimary\" variant=\"h4\" gutterBottom>\n                    Earn TSHARE by staking LP\n                  </Typography>\n                  <Grid container spacing={3}>\n                    {activeBanks\n                      .filter((bank) => bank.sectionInUI === 2)\n                      .map((bank) => (\n                        <React.Fragment key={bank.name}>\n                          <CemeteryCard bank={bank} />\n                        </React.Fragment>\n                      ))}\n                  </Grid>\n                </div>\n\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 1).length === 0}>\n                  <Typography color=\"textPrimary\" variant=\"h4\" gutterBottom style={{ marginTop: '20px' }}>\n                    Earn TOMB by staking LP\n                  </Typography>\n                  <Alert variant=\"filled\" severity=\"warning\">\n                    All below pools have ended. Please unstake and collect your rewards.\n                  </Alert>\n                  <Grid container spacing={3} style={{ marginTop: '20px' }}>\n                    {activeBanks\n                      .filter((bank) => bank.sectionInUI === 1)\n                      .map((bank) => (\n                        <React.Fragment key={bank.name}>\n                          <CemeteryCard bank={bank} />\n                        </React.Fragment>\n                      ))}\n                  </Grid>\n                </div>\n\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 0).length === 0}>\n                  <Typography color=\"textPrimary\" variant=\"h4\" gutterBottom style={{ marginTop: '20px' }}>\n                    Genesis Pools\n                  </Typography>\n                  <Grid container spacing={3}>\n                    {activeBanks\n                      .filter((bank) => bank.sectionInUI === 0)\n                      .map((bank) => (\n                        <React.Fragment key={bank.name}>\n                          <CemeteryCard bank={bank} />\n                        </React.Fragment>\n                      ))}\n                  </Grid>\n                </div>\n              </Box>\n            </Container>\n          ) : (\n            <UnlockWallet />\n          )}\n        </Route>\n        <Route path={`${path}/:bankId`}>\n          <BackgroundImage />\n          <Bank />\n        </Route>\n      </Page>\n    </Switch>\n  );\n};\n\nexport default Cemetery;\n","import { useContext } from 'react'\nimport { RefreshContext } from './../contexts/RefreshContext'\n\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh","import { TransactionResponse } from '@ethersproject/providers';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\n\nimport { AppDispatch, AppState } from '../index';\nimport { addTransaction, clearAllTransactions } from './actions';\nimport { TransactionDetails } from './reducer';\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n  const { chainId, account } = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chainId) return;\n\n      const { hash } = response;\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }));\n    },\n    [dispatch, chainId, account],\n  );\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useWallet();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000;\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  );\n}\n\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\n  const { chainId } = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({ chainId })), [dispatch, chainId]),\n  };\n}\n","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode;\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  startAdornment?: React.ReactNode;\n  value: string;\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  );\n};\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.color.grey[200]};\n  border-radius: ${(props) => props.theme.borderRadius}px;\n  display: flex;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`;\n\nconst StyledInput = styled.input`\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.color.grey[600]};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`;\n\nexport default Input;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Button } from '@material-ui/core';\nimport Input, { InputProps } from '../Input';\n\ninterface TokenInputProps extends InputProps {\n  max: number | string;\n  symbol: string;\n  onSelectMax?: () => void;\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} Available\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\n            <StyledSpacer />\n            <div>\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\n                Max\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n    </StyledTokenInput>\n  );\n};\n\n/*\n            <div>\n              <Button size=\"sm\" text=\"Max\" />\n            </div>\n*/\n\nconst StyledTokenInput = styled.div``;\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`;\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`;\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`;\n\nexport default TokenInput;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { BigNumber } from 'ethers';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\n  const [allowance, setAllowance] = useState<BigNumber>(null);\n  const { account } = useWallet();\n\n  const fetchAllowance = useCallback(async () => {\n    const allowance = await token.allowance(account, spender);\n    setAllowance(allowance);\n  }, [account, spender, token]);\n\n  useEffect(() => {\n    if (account && spender && token) {\n      fetchAllowance().catch((err) => console.error(`Failed to fetch allowance: ${err.stack}`));\n    }\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\n\n  return allowance;\n};\n\nexport default useAllowance;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length;\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <StyledSpacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  );\n};\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.color.grey[100]}00;\n  display: flex;\n  height: 96px;\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\n    ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`;\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nexport default ModalActions;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender,\n      },\n    });\n  }, [approvalState, token, spender, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport AccountButton from '../Nav/AccountButton';\n\nconst UnlockWallet = () => {\n  return (\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n      <AccountButton />\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\n    </Box>\n  );\n};\n\nexport default UnlockWallet;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useTombStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { fastRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTombPrice(){\n      try {\n        setStat(await tombFinance.getTombStat());\n      }\n      catch(err){\n        console.error(err)\n      }\n    }\n    fetchTombPrice();\n  }, [setStat, tombFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useTombStats;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardIconProps {\n  children?: React.ReactNode;\n}\n\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\n\nconst StyledCardIcon = styled.div`\n  background-color: ${(props) => props.theme.color.white};\n  font-size: 36px;\n  height: 95px;\n  width: 95px;\n  border-radius: 40px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  box-shadow: inset 4px 4px 8px ${(props) => props.theme.color.grey[300]},\n    inset -6px -6px 12px ${(props) => props.theme.color.grey[100]};\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default CardIcon;\n","import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext);\n\n  let s: number;\n  switch (size) {\n    case 'lg':\n      s = spacing[6];\n      break;\n    case 'sm':\n      s = spacing[2];\n      break;\n    case 'md':\n    default:\n      s = spacing[4];\n  }\n\n  return <StyledSpacer size={s} />;\n};\n\ninterface StyledSpacerProps {\n  size: number;\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`;\n\nexport default Spacer;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { LPStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useLpStats = (lpTicker: string) => {\n  const [stat, setStat] = useState<LPStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchLpPrice() {\n      try{\n        setStat(await tombFinance.getLPStat(lpTicker));\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchLpPrice();\n  }, [setStat, tombFinance, slowRefresh, lpTicker]);\n\n  return stat;\n};\n\nexport default useLpStats;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface PageHeaderProps {\n  icon: React.ReactNode;\n  subtitle?: string;\n  title?: string;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\n  return (\n    <StyledPageHeader>\n      {/* <StyledIcon>{icon}</StyledIcon> */}\n      <StyledTitle>{title}</StyledTitle>\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\n    </StyledPageHeader>\n  );\n};\n\nconst StyledPageHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\n  padding-top: ${(props) => props.theme.spacing[6]}px;\n  max-width: 512px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst StyledTitle = styled.h1`\n  color: ${(props) => props.theme.color.grey[100]};\n  font-size: 36px;\n  font-weight: 700;\n  margin: 0;\n  padding: 0;\n`;\n\nconst StyledSubtitle = styled.h3`\n  color: ${(props) => props.theme.color.grey[400]};\n  font-size: 18px;\n  font-weight: 400;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n`;\n\nexport default PageHeader;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\ninterface ValueProps {\n  value: string;\n}\n\nconst Value: React.FC<ValueProps> = ({ value }) => {\n  return <StyledValue>{value}</StyledValue>;\n};\n\nconst StyledValue = styled.div`\n  font-size: 36px;\n  font-weight: 700;\n`;\n\nexport default Value;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useZap = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleZap = useCallback(\n    (zappingToken: string, tokenName: string, amount: string) => {\n      handleTransactionReceipt(\n        tombFinance.zapIn(zappingToken, tokenName, amount),\n        `Zap ${amount} in ${bank.depositTokenName}.`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onZap: handleZap };\n};\n\nexport default useZap;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useShareStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchSharePrice() {\n      try {\n        setStat(await tombFinance.getShareStat());\n      } catch(err){\n        console.error(err)\n      }\n    }\n    fetchSharePrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useShareStats;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\n    setStakedTokenPriceInDollars(balance);\n  }, [stakedToken, stakedTokenName, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\n    }\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\n\n  return stakedTokenPriceInDollars;\n};\n\nexport default useStakedTokenPriceInDollars;\n"],"sourceRoot":""}